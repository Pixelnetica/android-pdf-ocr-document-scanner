apply plugin: 'com.android.application'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
        ignoreExitValue = true
    }
    return stdout.toString().trim()
}

// Using external file for app signing
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
//def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
//def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
//keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    def gitHash
    try {
        gitHash = getGitHash()
    } catch (Exception w) {
        gitHash = ""
    }

    // Using Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        // Demo signing config
        demo {
            keyAlias 'com.pixelnetica.cropdemo'
            keyPassword '123456'
            storeFile file("${rootDir}/demo.keystore.jks")
            storePassword '123456'
        }
    }

    compileSdkVersion 30
    buildToolsVersion '30.0.2'
    defaultConfig {
        applicationId "com.pixelnetica.easyscan"
        // NOTE: Don't change value here. Select build flavor
        buildConfigField "boolean", "DEVELOP", "false"
        buildConfigField "String", "GIT_HASH", "\"${gitHash}\""

        minSdkVersion 21
        targetSdkVersion 30

        versionCode 46
        versionName "2.3.9." + versionCode.toString()

        // Add build version and git hash to bundle (.aab) file name.
        setProperty("archivesBaseName", "$project.name-v$versionCode-${gitHash}")

        ndk {
            abiFilters = ['armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86']
        }

    }
    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            debuggable false
            jniDebuggable false
        }
        signed {
            initWith release
            matchingFallbacks = ['release']
            // To run release under IDE
            signingConfig signingConfigs.demo
        }
        // EasyScan app build variant for PlayStore publishing
        playstore {
            initWith release
            matchingFallbacks = ['release']
            // To run release under IDE
            signingConfig null  // Will be override later
        }
    }

    // Define flavors
    flavorDimensions 'stage'
    productFlavors {
        develop {
            dimension 'stage'
        }
        product {
            dimension 'stage'

            repositories {
                maven {
                    url 'http://repo.pixelnetica.com:8081/artifactory/libs-release'
                }
            }

            // Using external file for app signing
            // Create a variable called keystorePropertiesFile, and initialize it to your
            // keystore.properties file, in the rootProject folder.
            def keystorePropertiesFile = rootProject.file("${projectDir}/keystore.properties")

            try {
                keystorePropertiesFile.withInputStream { stream ->
                    println "Configure signing flavor"

                    // Initialize a new Properties() object called keystoreProperties.
                    def keystoreProperties = new Properties()

                    // Load your keystore.properties file into the keystoreProperties object.
                    keystoreProperties.load(stream)

                    signingConfig = android.signingConfigs.create("${name}")
                    signingConfig.keyAlias = keystoreProperties['keyAlias']
                    signingConfig.keyPassword = keystoreProperties['keyPassword']
                    signingConfig.storeFile = file(keystoreProperties['storeFile'])
                    signingConfig.storePassword = keystoreProperties['storePassword']
                }
            } catch (IOException e) {
                println "Cannot read playstore properties"
                signingConfig null
            }
        }
    }

    variantFilter { variant ->
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (variant.flavors[0].name == 'develop' && variant.buildType.name == 'playstore') {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }


    // Add build version to apk file name
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.name}-${variant.flavorName}-v${variant.versionCode}-${gitHash}.apk"
        }
    }
}

// Raise error of no signing config found
task checkSigningConfig {
    doLast {
        android.applicationVariants.all { variant ->
            assert variant.signingConfig != null
        }
    }
}

// Check signing configuration only for assembleProductPlaystore variant
project.afterEvaluate {
    assembleProductPlaystore.dependsOn checkSigningConfig
}

repositories{
    flatDir{
        dirs 'libs'
    }
}

// Lookup dynamic libraries changes every 10 minutes
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 10, 'minutes'

    // we work with the unreleased development version
    if (name.contains('develop')) {
        resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
            if (dependency.requested instanceof ModuleComponentSelector) {
                ModuleComponentSelector selector = (ModuleComponentSelector) dependency.requested
                if (selector.group == 'com.pixelnetica.sdk' && selector.module == 'scanning-release') {
                    def targetProject = findProject(':scanning')
                    if (targetProject != null) {
                        println "Substitute mobule for configuration $name"
                        dependency.useTarget targetProject
                    }
                }
            }
        }
    }
}

// Command to refresh dependencies
// gradlew.bat clean build --refresh-dependencies

dependencies {
    // Take release library "-SNAPSHOT" behavior: update every changes, not only version number
    implementation('com.pixelnetica.sdk:scanning-release:2.3.9') { changing = true }

    // Dependencies for develop stage
    developImplementation('androidx.exifinterface:exifinterface:1.3.2')

    implementation "androidx.annotation:annotation:1.1.0"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
}
